openapi: 3.1.0
info:
  title: Comment Module API
  version: 1.0.0
  description: >
    模块内聚的评论系统 API（仅包含评论模块自有资源）。
    安全建议：JWT（Bearer）。写操作支持 Idempotency-Key。并发控制使用 ETag/If-Match。
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
servers:
  - url: https://api.example.com/api/comments/v1
tags:
  - name: Subjects
  - name: Comments
  - name: Reactions
  - name: Moderation
  - name: Metrics
  - name: Events

security:
  - bearerAuth: []

paths:
  /subjects/{subject_key}:
    put:
      tags: [Subjects]
      summary: 注册或更新 Subject（幂等）
      parameters:
        - $ref: '#/components/parameters/SubjectKey'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectUpsert'
      responses:
        '200':
          description: 已存在则返回
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subject' }
        '201':
          description: 新建成功
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subject' }
        default:
          $ref: '#/components/responses/Problem'

  /subjects/by-key/{subject_key}:
    get:
      tags: [Subjects]
      summary: 通过 subject_key 获取 Subject
      parameters:
        - $ref: '#/components/parameters/SubjectKey'
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subject' }
        default:
          $ref: '#/components/responses/Problem'

  /subjects/{subject_id}:
    get:
      tags: [Subjects]
      summary: 获取 Subject（按 subject_id）
      parameters:
        - $ref: '#/components/parameters/SubjectId'
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subject' }
        default:
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Subjects]
      summary: 更新 Subject 状态/策略
      parameters:
        - $ref: '#/components/parameters/SubjectId'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubjectPatch' }
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subject' }
        default:
          $ref: '#/components/responses/Problem'

  /subjects/{subject_id}/comments:
    get:
      tags: [Comments]
      summary: 列出顶层评论（可选不同视图）
      security: []  # 如允许匿名读
      parameters:
        - $ref: '#/components/parameters/SubjectId'
        - $ref: '#/components/parameters/View'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/StatusFilter'
        - $ref: '#/components/parameters/WithCounts'
        - $ref: '#/components/parameters/WithMyReaction'
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CommentsPage' }
        default:
          $ref: '#/components/responses/Problem'
    post:
      tags: [Comments]
      summary: 创建评论（顶层或子评）
      parameters:
        - $ref: '#/components/parameters/SubjectId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CommentCreate' }
      responses:
        '201':
          description: Created
          headers:
            ETag:
              schema: { type: string }
            Location:
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Comment' }
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}:
    get:
      tags: [Comments]
      summary: 获取单条评论详情
      security: []
      parameters:
        - $ref: '#/components/parameters/CommentId'
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Comment' }
        default:
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Comments]
      summary: 编辑评论（乐观并发）
      parameters:
        - $ref: '#/components/parameters/CommentId'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CommentPatch' }
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Comment' }
        default:
          $ref: '#/components/responses/Problem'
    delete:
      tags: [Comments]
      summary: 删除评论（默认软删）
      parameters:
        - $ref: '#/components/parameters/CommentId'
        - $ref: '#/components/parameters/Soft'
      responses:
        '204':
          description: Deleted
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}/replies:
    get:
      tags: [Comments]
      summary: 展开某楼层的子树
      security: []
      parameters:
        - $ref: '#/components/parameters/CommentId'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/CollapseBelow'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CommentsPage' }
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}/reactions/up:
    put:
      tags: [Reactions]
      summary: 点赞/取消（幂等）
      parameters:
        - $ref: '#/components/parameters/CommentId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReactionToggle' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReactionState' }
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}/reactions/down:
    put:
      tags: [Reactions]
      summary: 点踩/取消（幂等）
      parameters:
        - $ref: '#/components/parameters/CommentId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReactionToggle' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReactionState' }
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}/reactions/emoji/{code}:
    put:
      tags: [Reactions]
      summary: 表情反应/取消（幂等）
      parameters:
        - $ref: '#/components/parameters/CommentId'
        - name: code
          in: path
          required: true
          schema: { type: string, description: '如 thumbs_up, heart_eyes 等' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReactionToggle' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReactionState' }
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}/reactions/summary:
    get:
      tags: [Reactions]
      summary: 读取反应汇总与我的反应
      parameters:
        - $ref: '#/components/parameters/CommentId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReactionState' }
        default:
          $ref: '#/components/responses/Problem'

  /comments/{comment_id}/reports:
    post:
      tags: [Moderation]
      summary: 举报评论
      parameters:
        - $ref: '#/components/parameters/CommentId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReportCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_id: { type: integer, format: int64 }
        default:
          $ref: '#/components/responses/Problem'

  /moderation/comments:
    get:
      tags: [Moderation]
      summary: 审核队列（需版主权限）
      parameters:
        - $ref: '#/components/parameters/StatusFilterModeration'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Comment' }
                  next_cursor:
                    type: string
                    nullable: true
        default:
          $ref: '#/components/responses/Problem'

  /moderation/comments/{comment_id}/actions:
    post:
      tags: [Moderation]
      summary: 对评论执行审核动作
      parameters:
        - $ref: '#/components/parameters/CommentId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ModerationActionRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ModerationAction' }
        default:
          $ref: '#/components/responses/Problem'

  /subjects/{subject_id}/metrics:
    get:
      tags: [Metrics]
      summary: 读取 Subject 级指标
      parameters:
        - $ref: '#/components/parameters/SubjectId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SubjectMetrics' }
        default:
          $ref: '#/components/responses/Problem'

  /subjects/{subject_id}/events:
    get:
      tags: [Events]
      summary: SSE 实时事件（comment.created/updated/deleted/reaction.changed）
      parameters:
        - $ref: '#/components/parameters/SubjectId'
        - name: since
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: types
          in: query
          required: false
          description: 逗号分隔的事件类型
          schema:
            type: string
            example: comment.created,comment.updated,reaction.changed
      responses:
        '200':
          description: text/event-stream
          content:
            text/event-stream:
              schema:
                type: string
                description: SSE 数据流（逐行事件），见示例
              examples:
                example:
                  summary: SSE 片段
                  value: |
                    event: comment.created
                    id: 174002
                    data: {"subject_id":"018f...","comment":{"id":987,"body_html":"<p>...</p>"}}

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    SubjectKey:
      name: subject_key
      in: path
      required: true
      schema: { type: string }
    SubjectId:
      name: subject_id
      in: path
      required: true
      schema: { type: string, format: uuid }
    CommentId:
      name: comment_id
      in: path
      required: true
      schema: { type: integer, format: int64 }
    Limit:
      name: limit
      in: query
      required: false
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    Cursor:
      name: cursor
      in: query
      required: false
      schema: { type: string, nullable: true }
    View:
      name: view
      in: query
      required: false
      schema:
        type: string
        enum: [best, hot, new, old, controversial]
        default: best
    Order:
      name: order
      in: query
      required: false
      schema:
        type: string
        enum: [structure, chronological]
        default: structure
    StatusFilter:
      name: status
      in: query
      required: false
      description: 读取端可用，默认 published
      schema:
        type: string
        enum: [published, all, pending, hidden, deleted, spam]
        default: published
    StatusFilterModeration:
      name: status
      in: query
      required: false
      description: 审核队列过滤
      schema:
        type: string
        enum: [pending, hidden, spam, deleted, all]
        default: pending
    WithCounts:
      name: with_counts
      in: query
      required: false
      schema: { type: boolean, default: true }
    WithMyReaction:
      name: with_my_reaction
      in: query
      required: false
      schema: { type: boolean, default: true }
    CollapseBelow:
      name: collapse_below
      in: query
      required: false
      schema: { type: number, minimum: 0, maximum: 1, default: 0 }
    Soft:
      name: soft
      in: query
      required: false
      schema: { type: boolean, default: true }
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      schema: { type: string, format: uuid }
    IfMatch:
      name: If-Match
      in: header
      required: false
      schema: { type: string }

  responses:
    Problem:
      description: Error (RFC 7807)
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }

  schemas:
    Subject:
      type: object
      properties:
        subject_id: { type: string, format: uuid }
        subject_key: { type: string }
        is_locked: { type: boolean }
        is_archived: { type: boolean }
        policy:
          type: object
          additionalProperties: true
          properties:
            max_depth: { type: integer, minimum: 1, default: 6 }
            pre_moderation: { type: boolean, default: false }
        comment_count: { type: integer }
        visible_count: { type: integer }
        last_commented_at: { type: string, format: date-time }
        created_at: { type: string, format: date-time }
      required: [subject_id, subject_key, is_locked, is_archived, policy]

    SubjectUpsert:
      type: object
      properties:
        is_locked: { type: boolean }
        is_archived: { type: boolean }
        policy:
          type: object
          additionalProperties: true
          properties:
            max_depth: { type: integer, minimum: 1 }
            pre_moderation: { type: boolean }

    SubjectPatch:
      type: object
      properties:
        is_locked: { type: boolean }
        is_archived: { type: boolean }
        policy:
          type: object
          additionalProperties: true

    Comment:
      type: object
      properties:
        id: { type: integer, format: int64 }
        subject_id: { type: string, format: uuid }
        root_id: { type: integer, format: int64, nullable: true }
        parent_id: { type: integer, format: int64, nullable: true }
        depth: { type: integer }
        author:
          type: object
          properties:
            id: { type: integer, format: int64 }
            urn: { type: string, nullable: true }
        body_md: { type: string }
        body_html: { type: string, nullable: true }
        status:
          type: string
          enum: [published, pending, hidden, deleted, spam]
        toxicity_score: { type: number, minimum: 0, maximum: 1, nullable: true }
        counters:
          $ref: '#/components/schemas/Counters'
        my_reaction:
          $ref: '#/components/schemas/MyReaction'
        quality:
          $ref: '#/components/schemas/Quality'
        collapsed:
          type: object
          nullable: true
          properties:
            value: { type: boolean }
            reason: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        edited_at: { type: string, format: date-time, nullable: true }
        deleted_at: { type: string, format: date-time, nullable: true }
      required: [id, subject_id, depth, author, body_md, status, counters, created_at]

    CommentCreate:
      type: object
      properties:
        parent_id: { type: integer, format: int64, nullable: true }
        body_md: { type: string }
        status:
          type: string
          enum: [published, pending]
      required: [body_md]

    CommentPatch:
      type: object
      properties:
        body_md: { type: string }
        status:
          type: string
          enum: [published, hidden, deleted, spam]

    CommentsPage:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Comment' }
        next_cursor:
          type: string
          nullable: true
      required: [items]

    Counters:
      type: object
      properties:
        up: { type: integer }
        down: { type: integer }
        replies: { type: integer }
      required: [up, down, replies]

    MyReaction:
      type: object
      properties:
        up: { type: boolean, default: false }
        down: { type: boolean, default: false }
        emoji:
          type: array
          items: { type: string }
      additionalProperties: false

    ReactionToggle:
      type: object
      properties:
        active: { type: boolean }
      required: [active]

    ReactionState:
      type: object
      properties:
        summary:
          type: object
          properties:
            up: { type: integer }
            down: { type: integer }
            emoji:
              type: array
              items:
                type: object
                properties:
                  code: { type: string }
                  count: { type: integer }
        my_reaction:
          $ref: '#/components/schemas/MyReaction'
      required: [summary]

    ReportCreate:
      type: object
      properties:
        reason: { type: string }
        metadata:
          type: object
          additionalProperties: true
      required: [reason]

    ModerationActionRequest:
      type: object
      properties:
        action:
          type: string
          enum: [approve, hide, delete, spam, restore, shadow_ban]
        reason: { type: string }
      required: [action]

    ModerationAction:
      type: object
      properties:
        id: { type: integer, format: int64 }
        comment_id: { type: integer, format: int64 }
        operator_id: { type: integer, format: int64 }
        action:
          type: string
          enum: [approve, hide, delete, spam, restore, shadow_ban]
        reason: { type: string, nullable: true }
        prev_status:
          type: string
          enum: [published, pending, hidden, deleted, spam]
          nullable: true
        new_status:
          type: string
          enum: [published, pending, hidden, deleted, spam]
        created_at: { type: string, format: date-time }

    SubjectMetrics:
      type: object
      properties:
        comment_count: { type: integer }
        visible_count: { type: integer }
        top_contributors:
          type: array
          items:
            type: object
            properties:
              actor_id: { type: integer, format: int64 }
              count: { type: integer }
        p95_latency_ms: { type: integer }

    Quality:
      type: object
      properties:
        best_score: { type: number }
        hot_score: { type: number }

    Problem:
      type: object
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        meta:
          type: object
          additionalProperties: true
      required: [title, status]
